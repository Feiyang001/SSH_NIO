<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"    
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
        xmlns:p="http://www.springframework.org/schema/p"  
        xmlns:aop="http://www.springframework.org/schema/aop"   
        xmlns:context="http://www.springframework.org/schema/context"  
        xmlns:jee="http://www.springframework.org/schema/jee"  
        xmlns:tx="http://www.springframework.org/schema/tx"  
        xsi:schemaLocation="    
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd  
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd  
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	
	<!-- 配合连接池 -->
	<!-- 引入外部的属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<!-- 配置c3p0连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.user}"/>
		<property name="password"  value="${jdbc.password}"/>
	</bean>
	
	<!-- 配饰hibernate的相关的属性 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 配置hibernate的属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.connection.url">jdbc:mysql://address=(protocol=tcp)(host=localhost)(port=3306)/test</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
            </props>
		</property>

        <!-- 注入连接池 -->
        <property name="dataSource" ref="dataSource" />

        <!-- 加载hibernate的映射文件 -->
		<property name="mappingResources">
			<list>
				<value>com/muke/entity/Department.hbm.xml</value>
				<value>com/muke/entity/Employee.hbm.xml</value>
			</list>
		</property>
        <property name="annotatedClasses">
            <list>
                <value>com.muke.entity.DepartmentEntity</value>
                <value>com.muke.entity.EmployeeEntity</value>
            </list>
        </property>
    </bean>
		
	<!-- 配置action类 -->
    <bean id="employeeAction" class="com.muke.action.EmployeeAction" scope="prototype">
        <property name="employeeService" ref="employeeService" />
		<property name="departmentService" ref="departmentService"/>
    </bean>

	<bean id="departmentAction " class="com.muke.action.DepartmentAction" scope="prototype">
		<property name="departmentService" ref="departmentService"/>
	</bean>

	<!-- 配置业务层的类 -->
    <bean id="employeeService" class="com.muke.service.Impl.EmployeeServiceImpl" >
        <property name="employeeDao" ref="employeeDao"/>
    </bean>
	<bean id="departmentService" class="com.muke.service.Impl.DepartmentServiceImpl">
		<property name="departmentDao" ref="departmentDao"/>
	</bean>

	<!-- 配置Dao类 -->
    <bean id="employeeDao" class="com.muke.dao.Impl.EmployeeDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
	<bean id="departmentDao" class="com.muke.dao.Impl.DepartmentDaoImpl" >
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 配置事务管理 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<!-- 开启注解配置 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
</beans>            